#===============================================================================================================
#                                               Description
#===============================================================================================================

# NOTE: It is recommended you complete Introduction to Esolangs or MiniBitFlip before solving this one.
#
# Task:
# Make an interpreter for an esoteric language called Ticker. Ticker is a descendant of [Tick](https://www.codewars.com/kata/esolang-tick). Your language has the following commands:
# >: increment the selector by 1
#
# <: decrement the selector by 1
#
# *: add the ascii value of selected cell to the output tape
#
# +: increment selected cell data by 1. If 256, then it is 0
#
# -: increment selected cell data by -1. If less than 0, then 255
#
# /: set selected cell data to 0
#
# !: add new data cell to the end of the array
#
# You start with selector at 0 and one cell with a value of 0. If selector goes out of bounds, assume 0 for that cell but do not add it to the memory. If a + or - is being made do not change the value of the assumed cell. It will always stay 0 unless it is added to the memory
#
# In other words:
#
# data: start 0 end
# selector:   ^
# data start 1 2 4 end
# selector:        ^
# Assume that cell is zero.
# Examples:
# Consider the following program:

# It's output is this:
#
# 'Hello World!'
# This is made just by using 1 data cell.
#
# Example using multiple data cells:
#

# And it's output is still:
#
# 'Hello World!'
# A more efficient example:
#

# Which still returns the classic:
#
# 'Hello World!'
# Other characters are ingnored and therefore can serve as comments.
#
# After you're done, fell free to make translations and to discuss this kata.

#===============================================================================================================
#                                               Solution
#===============================================================================================================

class EsolangTicker
  attr_reader :result

  def initialize(tape)
    @tape = tape.gsub(/[^+-<>*\/\!]/, '').chars
    @cells = [0]
    @i = 0
    @result = ''
  end

  def main
    @tape.each do |e|
      case e
      when '>'; @i += 1
      when '<'; @i -= 1
      when '*'; @result += (@cells[@i] && @i >= 0 ? @cells[@i].chr : "\x00")
      when '+'; (@cells[@i] + 1 == 256 ? @cells[@i] = 0 : @cells[@i] += 1) if @cells[@i] && @i >= 0
      when '-'; (@cells[@i] - 1 < 0 ? @cells[@i] = 255 : @cells[@i] -= 1) if @cells[@i] && @i >= 0
      when '/'; @cells[@i] = 0
      when '!'; @cells += [0]
      end
    end
  end
end

def interpreter(tape)
  ticker = EsolangTicker.new(tape)
  ticker.main
  ticker.result
end
